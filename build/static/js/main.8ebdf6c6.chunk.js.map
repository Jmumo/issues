{"version":3,"sources":["constants/const.js","actions/fetchRepos.js","reducers/reporeducer.js","components/Home.js","reducers/reducer.js","store.js","App.js","reportWebVitals.js","index.js","constants/queries.js"],"names":["module","exports","headers","github_data","key","repoList","state","repolist","action","type","payload","Home","useState","repositories","useSelector","dispatch","useDispatch","getRepoAction","axios","post","baseurl","query","body","then","res","catch","err","console","log","useEffect","data","className","onChange","e","preventDefault","target","value","getRepo","reducers","combineReducers","middleware","applyMiddleware","thunk","store","createStore","App","Store","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HAMAA,EAAOC,QALa,CAClB,IAAM,4CACN,SAAW,QACX,QAAU,mC,wJCCNC,EAAU,CACd,eAAe,mBAChB,cAAgB,SAASC,IAAYC,K,YCIvBC,EAXE,WACY,IADXC,EACU,uDADF,CACtBC,SAAS,IAAKC,EAAU,uCAGpB,MAAmB,gBAAhBA,EAAOC,KACNH,EAAK,2BAAOA,GAAP,IAAaC,SAASC,EAAOE,UAG/BJ,G,OCMcH,IAAYC,IAI1B,SAASO,IAAQ,IAAD,EAEDC,mBAAS,IAFR,mBAIpBC,GAJoB,UAIJC,aAAY,SAACR,GAAD,OAAWA,EAAMD,aAG9CU,EAAWC,cAEXC,EAAgB,kBAAIF,GFhBnB,SAAUA,GACfG,IAAMC,KACNhB,IAAYiB,QAAQ,CAClBC,MAAMC,KAEP,CACMpB,QAAQA,IAIfqB,MAAK,SAAAC,GAEHT,EAAS,CAACN,KAAK,cAAeC,QAAQc,OAEvCC,OAAO,SAAAC,GACNC,QAAQC,IAAIF,UEIhBG,qBAAU,WAER,IAAMC,EAAOb,IAEbU,QAAQC,IAAKE,KAKb,IAMF,OACE,qBAAKC,UAAU,GAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,wBACEC,SAAW,SAAAC,GAAC,OARR,SAACA,GACfA,EAAEC,iBACFP,QAAQC,IAAIK,EAAEE,OAAOC,OAMIC,CAAQJ,IACvBF,UAAU,uBAKXJ,QAAQC,IAAIf,EAAaN,SAASuB,KAAKA,W,mBC5CnCQ,EAJEC,YAAgB,CAC7BlC,SAASA,ICFPmC,EAAaC,YAAgBC,KAIpBC,EAFDC,YAAYN,EAASE,GCWpBK,MAbf,WAEE,OACE,cAAC,IAAD,CAAUF,MAAUG,EAApB,SACF,qBAAKf,UAAU,wBAAf,SACE,cAACpB,EAAD,SCCWoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K,gBCJA/C,EAAOC,QAbG,oL","file":"static/js/main.8ebdf6c6.chunk.js","sourcesContent":["\nconst github_data = {\n  \"key\":\" ca797bd4b0238d9228e76cbab1ac89664f5c6a60\",\n  \"username\":\"Jmumo\",\n  \"baseurl\":\"https://api.github.com/graphql\"\n}\nmodule.exports = github_data","\nimport axios from 'axios';\nimport github_data from '../constants/const.js';\nimport body from '../constants/queries'\n\nconst headers = {\n  \"Content-Type\":\"application/json\",\n \"Authorization\":\"bearer\"+github_data.key,\n}\n\nexport function fetchrepos(){\n    return function (dispatch){\n      axios.post(\n      github_data.baseurl,{\n        query:body\n      }\n      ,{\n             headers:headers\n      }\n       \n    \n    ).then(res =>{\n\n        dispatch({type:\"FETCH_REPOS\", payload:res})\n\n    }).catch( err =>{\n        console.log(err)\n    })\n\n    }\n}","const repoList = (state = {\n    repolist:{}}, action )=>{\n\n      \n        if(action.type === \"FETCH_REPOS\"){\n            state = {...state,repolist:action.payload }\n            return state;   \n        }\n        return state; \n    }\n\nexport default repoList;","import React, { useState ,useEffect } from \"react\";\nimport axios from 'axios';\nimport github_data from '../constants/const.js';\nimport body from '../constants/queries'\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { fetchrepos } from '../actions/fetchRepos'\nimport { repoList  } from \"../reducers/reporeducer.js\";\n\n\n\n\nconst headers = {\n  \"Content-Type\":\"application/json\",\n   \"Authorization\": \"bearer\"+github_data.key,\n}\n\n\nexport default function Home() {\n\n    const [nodes, setNodes] = useState({});    \n\n    const  repositories  = useSelector((state) => state.repoList);\n  \n\n    const dispatch = useDispatch()\n\n    const getRepoAction = ()=>dispatch(fetchrepos()); \n\n\n    useEffect(()=>{\n\n      const data = getRepoAction()\n\n      console.log((data))\n\n      // const Map =  <div>{data.map((d)=><li key ={d.createdAt}> {d.name}</li>)}</div>\n      \n     \n    },[])\n\nconst getRepo = (e) =>{\n  e.preventDefault();\n  console.log(e.target.value);\n}\n    return (\n      <div className=\"\">\n        <div className=\" card col-md-8 mx-auto mt-3 \">\n          <select\n            onChange={ e =>getRepo(e)}\n            className=\"custom-select mt-3\"\n          >\n           \n          </select>\n         \n          {console.log(repositories.repolist.data.data)}\n        \n         \n        </div>\n      </div>\n    );\n}\n\n// useEffect(() => {\n//     async function fetchdata (){\n\n//     await axios.post(\n//       github_data.baseurl,{\n//         query:body\n//       },{\n//             headers\n//       }\n     \n//     ).then(res=>{\n//        setData(res.data.data.user.repositories.nodes)\n//       //  console.log(res)\n//     })\n//     .catch(error => console.log(error))\n//    };\n//    fetchdata()\n// },[])\n","import { combineReducers } from 'redux'\nimport  repoList  from './reporeducer'\n\n//  export const issuereducer = (state,action)=>{\n//   return state\n// }\n\nconst reducers = combineReducers({\n    repoList:repoList\n})\n\nexport default reducers;","import { createStore,applyMiddleware } from \"redux\";\nimport  thunk  from 'redux-thunk'\n\n\nimport reducers from './reducers/reducer'\n\nconst middleware = applyMiddleware(thunk);\n\nconst store = createStore(reducers,middleware);\n\nexport default store;","\nimport './App.css';\nimport Home from './components/Home'\nimport { Provider } from 'react-redux'\n import Store from './store'\n\nfunction App() {\n\n  return (\n    <Provider store = { Store }>\n  <div className=\"container text-center\">\n    <Home/>\n  </div>\n  </Provider>\n\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const body = \n  `query { \n user(login:\"Jmumo\"){\n  repositories(last:10,orderBy: {field:CREATED_AT,direction:DESC}){\n    nodes{\n      createdAt\n      pushedAt\n      name\n    }\n  }\n}\n}`\n\nmodule.exports = body\n\n\n// {\n//    repository (owner: \"Jmumo\", name: \"JAYMVC\") {\n//      name\n//      issues (last: 5, ) {\n//        totalCount\n//        edges {cursor}\n//        nodes {\n//          number\n//          title\n//         closedAt\n//         createdAt\n//         id\n//         state\n        \n//        }\n//      }\n//    }\n//  }"],"sourceRoot":""}